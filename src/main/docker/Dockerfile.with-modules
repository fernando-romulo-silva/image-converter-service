ARG JAVA_VERSION=17.0.7_7-jre-alpine@sha256:dd8238c151293ae6a7c22898ef2f0df2af8a05786aef73ccd3248e73765969ed
ARG ALPINE_VERSION=3.15.0@sha256:36ca6d117c068378d5461b959d019eabe8877770f13e11e54a5ce9f3827a7e72

FROM eclipse-temurin:${JAVA_VERSION} AS builder
WORKDIR /application

ARG JAR_FILE=target/*.jar
COPY ${JAR_FILE} application.jar

RUN ["java", "-Djarmode=layertools", "-jar", "application.jar", "extract"]

RUN ["jdeps",\
     # dont worry about missing modules
 	 "--ignore-missing-deps",\
     # suppress any warnings printed to console "-q",\
     #"-quiet",\
     # java release version targeting
     "--multi-release 17",\
     # output the dependencies at end of run
     "--print-module-deps",\
     # Performs a recursive analysis to identify dependencies at all levels
     "--recursive",\
     # specify the the dependencies for the jar
     #"--class-path",\?
     "--module-path",\
     "dependencies/BOOT-INF/lib/*",\
     # pipe the result of running jdeps on the app jar to file
     "application.jar > jre-deps.info"\
]     

# new jre
RUN ["$JAVA_HOME/bin/jlink",\
        "--module-path",\
        "dependencies/BOOT-INF/lib",\
        "--add-modules",\
        "$(cat jre-deps.info)",\
        #"--verbose",\
        "--strip-debug",\
        #"--strip-java-debug-attributes",\
        #"--strip-native-debug-symbols",\ 
        "--compress 2",\
        "--no-header-files",\
        "--no-man-pages",\
        "--output jre"\
]

#=================================================================================

# take a smaller runtime image for the final output
FROM alpine:${ALPINE_VERSION}

# install tesseract
RUN [\
	"apk",\ 
	"add",\
    "--update",\
    "--no-cache",\
    "tesseract-ocr",\
    "tesseract-ocr-data-eng",\
    "dumb-init"\      
]

WORKDIR /application

# copy the custom JRE produced from jlink
ENV JAVA_HOME=/opt/java/openjdk
ENV PATH "${JAVA_HOME}/bin:${PATH}"
COPY --from=builder application/jre/ $JAVA_HOME

# copy the application
COPY --from=builder application/dependencies/ ./
COPY --from=builder application/spring-boot-loader ./
COPY --from=builder application/internal-dependencies ./
COPY --from=builder application/snapshot-dependencies ./
COPY --from=builder application/application/ ./

# create usergroup 'javauser' and 'javauser' user     
RUN addgroup --system javauser\
      && adduser -S -s  /bin/false -G javauser javauser \
      && chown -R javauser:javauser /application

# user the user 'javauser'
USER javauser

# execute the application
ENTRYPOINT [\
    "dumb-init",\
    "java",\
	# Profiling
    # "-Dcom.sun.management.jmxremote.port=9010",\ 
    # "-Dcom.sun.management.jmxremote.ssl=false",\ 
    # "-Dcom.sun.management.jmxremote.authenticate=false",\
    # "-Dcom.sun.management.jmxremote.local.only=false",\
    # Debug
    "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000",\
    # Spring  
    "-Dspring.profiles.active=local",\
    # VM
	"-XX:+UseContainerSupport",\ 
	"-XX:InitialRAMPercentage=40.0",\ 
	"-XX:MinRAMPercentage=20.0",\ 
	"-XX:MaxRAMPercentage=80.0",\
	# Exec
    "org.springframework.boot.loader.JarLauncher"\
]

# HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 CMD [ "executable" ]
# HEALTHCHECK CMD curl --fail http://localhost/health || exit 1

EXPOSE 8080 8000 9010
